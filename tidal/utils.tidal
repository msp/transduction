import Sound.Tidal.OscStream
import Sound.Tidal.MaxMspOsc

let p5Shape = dirt {cpsStamp = False, latency = 0.4}
    p5Slang = superDirtSlang {timestamp = NoStamp,
                              preamble = []
                             }
    p5Stream = do
      s <- makeConnection "127.0.0.1" 1818 p5Slang
      stream (Backend s $ (\_ _ _ -> return ())) p5Shape
    (scene, _) = pS "scene" Nothing
    combinedStream = do p5 <- p5Stream
                        ds <- superDirtState 57120
                        let d = setter ds
                        return $ \p -> do p5 p
                                          d p


p1 <- combinedStream
p2 <- combinedStream
p3 <- combinedStream
p4 <- combinedStream
p5 <- combinedStream
p6 <- combinedStream
p7 <- combinedStream
p8 <- combinedStream


let rpiShape = dirt {cpsStamp = True, latency = 0.4}
    rpiSlang = superDirtSlang {timestamp = NoStamp,
                              preamble = []
                             }
    rpiStream = do
      s <- makeConnection "192.168.0.103" 5005 rpiSlang
      stream (Backend s $ (\_ _ _ -> return ())) rpiShape
    rpi2Stream = do
      s <- makeConnection "192.168.0.104" 5005 rpiSlang
      stream (Backend s $ (\_ _ _ -> return ())) rpiShape
    rpi3Stream = do
      s <- makeConnection "192.168.0.105" 5005 rpiSlang
      stream (Backend s $ (\_ _ _ -> return ())) rpiShape
    rpi4Stream = do
      s <- makeConnection "192.168.0.106" 5005 rpiSlang
      stream (Backend s $ (\_ _ _ -> return ())) rpiShape
    (scene, _) = pS "scene" Nothing
    combinedStream = do rpi <- rpiStream
                        rpi2 <- rpi2Stream
                        rpi3 <- rpi3Stream
                        rpi4 <- rpi4Stream
                        ds <- superDirtState 57120
                        let d = setter ds
                        return $ \p -> do rpi p
                                          rpi2 p
                                          rpi3 p
                                          rpi4 p
                                          d p


r1 <- combinedStream
r2 <- combinedStream
r3 <- combinedStream
r4 <- combinedStream
r5 <- combinedStream
r6 <- combinedStream
r7 <- combinedStream
r8 <- combinedStream


let hush = mapM_ ($ silence) [d1,d2,d3,d4,d5,d6,d7,d8,d9,p1,p2,p3,p4,p5,p6,p7,p8,r1,r2,r3,r4,r5,r6,r7,r8]

let solo = (>>) hush
